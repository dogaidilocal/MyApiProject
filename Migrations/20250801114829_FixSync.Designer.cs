// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApiProject.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyApiProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250801114829_FixSync")]
    partial class FixSync
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyApiProject.Models.AssignedTo", b =>
                {
                    b.Property<string>("SSN")
                        .HasColumnType("character varying(9)")
                        .HasColumnOrder(0);

                    b.Property<int>("TaskID")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("Assigned_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SSN", "TaskID");

                    b.HasIndex("TaskID");

                    b.ToTable("Assigned_To");
                });

            modelBuilder.Entity("MyApiProject.Models.AssignmentLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogID"));

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("character varying(9)");

                    b.Property<int>("TaskID")
                        .HasColumnType("integer");

                    b.HasKey("LogID");

                    b.HasIndex("SSN");

                    b.HasIndex("TaskID");

                    b.ToTable("Assignment_Log");
                });

            modelBuilder.Entity("MyApiProject.Models.Department", b =>
                {
                    b.Property<int>("Dnumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Dnumber"));

                    b.Property<string>("Dname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Dnumber");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("MyApiProject.Models.Employee", b =>
                {
                    b.Property<string>("SSN")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<int>("Dno")
                        .HasColumnType("integer");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SSN");

                    b.HasIndex("Dno");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("MyApiProject.Models.Project", b =>
                {
                    b.Property<int>("Pnumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pnumber"));

                    b.Property<int?>("Completion_status")
                        .HasColumnType("integer");

                    b.Property<int>("Dnumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Due_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Pname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Start_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Pnumber");

                    b.HasIndex("Dnumber");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("MyApiProject.Models.ProjectLeader", b =>
                {
                    b.Property<string>("LeaderID")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<int>("Dnumber")
                        .HasColumnType("integer");

                    b.Property<int>("Pnumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Start_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LeaderID");

                    b.HasIndex("Dnumber");

                    b.HasIndex("Pnumber");

                    b.ToTable("Project_Leader");
                });

            modelBuilder.Entity("MyApiProject.Models.Task", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskID"));

                    b.Property<int?>("Completion_rate")
                        .HasColumnType("integer")
                        .HasColumnName("Completion_rate");

                    b.Property<DateTime?>("Due_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Pnumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Start_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Task_number")
                        .HasColumnType("integer");

                    b.HasKey("TaskID");

                    b.HasIndex("Pnumber");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("MyApiProject.Models.TaskCompletionLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogID"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TaskID")
                        .HasColumnType("integer");

                    b.HasKey("LogID");

                    b.HasIndex("TaskID");

                    b.ToTable("Task_Completion_Log");
                });

            modelBuilder.Entity("MyApiProject.Models.WorksOn", b =>
                {
                    b.Property<string>("SSN")
                        .HasColumnType("character varying(9)")
                        .HasColumnName("SSN");

                    b.Property<int>("Pnumber")
                        .HasColumnType("integer")
                        .HasColumnName("Pnumber");

                    b.HasKey("SSN", "Pnumber");

                    b.HasIndex("Pnumber");

                    b.ToTable("Works_On");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MyApiProject.Models.AssignedTo", b =>
                {
                    b.HasOne("MyApiProject.Models.Employee", "Employee")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("SSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApiProject.Models.Task", "Task")
                        .WithMany("AssignedEmployees")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MyApiProject.Models.AssignmentLog", b =>
                {
                    b.HasOne("MyApiProject.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("SSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApiProject.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MyApiProject.Models.Employee", b =>
                {
                    b.HasOne("MyApiProject.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("Dno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("MyApiProject.Models.Project", b =>
                {
                    b.HasOne("MyApiProject.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("Dnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("MyApiProject.Models.ProjectLeader", b =>
                {
                    b.HasOne("MyApiProject.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("Dnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApiProject.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("LeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApiProject.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Pnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MyApiProject.Models.Task", b =>
                {
                    b.HasOne("MyApiProject.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("Pnumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MyApiProject.Models.TaskCompletionLog", b =>
                {
                    b.HasOne("MyApiProject.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MyApiProject.Models.WorksOn", b =>
                {
                    b.HasOne("MyApiProject.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Pnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApiProject.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("SSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MyApiProject.Models.Employee", b =>
                {
                    b.Navigation("AssignedTasks");
                });

            modelBuilder.Entity("MyApiProject.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MyApiProject.Models.Task", b =>
                {
                    b.Navigation("AssignedEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
